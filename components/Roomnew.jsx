/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 Roomx.glb 
*/

import React, { useEffect, useRef, useState } from "react";
import { Html, useGLTF, useScroll, useTexture } from "@react-three/drei";
import * as THREE from "three";
import Home from "./Home";
// import { useControls } from "leva";
import { useFrame, useThree } from "@react-three/fiber";
import Menu from "./Menu";
import gsap from "gsap";
import { val } from "@theatre/core";
import { useCurrentSheet } from "@theatre/r3f";
import { useControls } from "leva";

import Contact from "./Contact";
import {
  DepthOfField,
  EffectComposer,
  Noise,
  Vignette,
} from "@react-three/postprocessing";

function Bloom({ children }) {
  const { gl, camera, size } = useThree();
  const [scene, setScene] = useState();
  const composer = useRef();
  useEffect(
    () => void scene && composer.current.setSize(size.width, size.height),
    [scene, size]
  );
  useFrame(() => scene && composer.current.render(), 1);
  return (
    <>
      <scene ref={setScene}>{children}</scene>
      <effectComposer ref={composer} args={[gl]}>
        <renderPass attachArray="passes" scene={scene} camera={camera} />
        <unrealBloomPass attachArray="passes" args={[undefined, 1.5, 1, 0]} />
      </effectComposer>
    </>
  );
}

export function Model(props) {
  const { check, setOpen, mdata, setMdata } = props;

  // console.log("from Roomnew", check, setOpen);

  const { nodes, materials } = useGLTF("/models/untitled.glb");

  // const [open, setOpen] = useState(false);
  const [another, setAnother] = useState(false);

  const texture = useTexture("/textures/trych.jpg");
  const texture2 = useTexture("/textures/books.jpg");
  const texture3 = useTexture("/textures/test_bake4_ed.jpg");

  texture.flipY = false;
  texture.colorSpace = THREE.SRGBToLinear;

  const textureMaterial = useRef(
    new THREE.MeshStandardMaterial({ map: texture })
  );

  const glasstextureMaterial = useRef(
    new THREE.MeshPhysicalMaterial({ map: texture })
  );

  texture2.flipY = false;
  texture2.colorSpace = THREE.SRGBToLinear;

  const textureMaterial2 = useRef(
    new THREE.MeshStandardMaterial({ map: texture2 })
  );

  texture3.flipY = false;
  texture3.colorSpace = THREE.SRGBToLinear;

  const textureMaterial3 = useRef(
    new THREE.MeshStandardMaterial({ map: texture3 })
  );

  // const modControls = useControls("Model", {
  //   position: { value: [0.42, 0.13, -1.71], label: "Position" },
  //   rotation: { value: [-1.59, 0, 1.57], label: "Rotation" },
  // });

  const sheet = useCurrentSheet();
  const scroll = useScroll();

  useFrame(() => {
    // the length of our sequence
    const sequenceLength = val(sheet.sequence.pointer.length);
    // update the "position" of the playhead in the sequence, as a fraction of its whole length
    sheet.sequence.position = scroll.offset * sequenceLength;
    if (scroll?.offset > 0.8) {
      setAnother(true);
    } else {
      setAnother(false);
    }

    // console.log(another);
  });
  const htmlRef = useRef();

  // console.log(htmlRef?.current?.clientWidth);

  // const { viewport } = useThree();
  const viewport = useThree((state) => state.viewport);
  const scaleFacetor = window.innerWidth / 1300;

  return (
    <group {...props} dispose={null}>
      <group
        position={[6.739, -0.126, 5.324]}
        rotation={[-3.065, 1.398, 3.047]}
      >
        <group position={[5.101, 1.125, -6.685]} rotation={[0, -0.22, 0]}>
          <mesh
            geometry={nodes.Cube_72003.geometry}
            // material={nodes.Cube_72003.material}
            material={textureMaterial}
            position={[-0.654, 0.437, 2.917]}
            rotation={[-0.689, -0.175, 1.586]}
          >
            <meshBasicMaterial map={texture} />
          </mesh>
        </group>
      </group>
      <group
        position={[2.633, 2.291, 0.305]}
        rotation={[-Math.PI / 2, Math.PI / 2, 0]}
      >
        <mesh
          geometry={nodes.HoneyComb_Rgb_lighting_0.geometry}
          // material={nodes.HoneyComb_Rgb_lighting_0.material}
          material={textureMaterial}
          position={[-0.341, 1.184, -1.774]}
          rotation={[1.569, 0.003, 0.038]}
        >
          <meshBasicMaterial map={texture} />
        </mesh>
      </group>
      <group
        position={[0.616, 1.454, -0.313]}
        rotation={[-2.369, 0.409, 3.064]}
      >
        <mesh
          geometry={nodes.Cylinder002_leaves_0.geometry}
          // material={nodes.Cylinder002_leaves_0.material}
          material={textureMaterial}
          position={[0.029, -0.104, 0.012]}
        >
          <meshBasicMaterial map={texture} />
        </mesh>
      </group>
      <group position={[0.139, 1.265, -0.701]} rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          geometry={nodes.Cylinder__0.geometry}
          // material={nodes.Cylinder__0.material}
          material={textureMaterial}
          position={[0, 0.045, -0.085]}
        >
          <meshBasicMaterial map={texture} />
        </mesh>
      </group>
      <group position={[1.054, 1.39, -0.305]} rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          geometry={nodes.Cube105_Material004_0.geometry}
          // material={nodes.Cube105_Material004_0.material}
          material={textureMaterial}
          position={[-0.053, 0.088, -0.06]}
        >
          <meshBasicMaterial map={texture} />
        </mesh>
      </group>
      <group position={[1.137, 1.287, -0.721]} rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          geometry={nodes.Cube022__0.geometry}
          // material={nodes.Cube022__0.material}
          material={textureMaterial}
          position={[0, -0.033, 0.067]}
        >
          <meshBasicMaterial map={texture} />
        </mesh>
      </group>
      <group position={[1.371, 1.36, -0.284]} rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          geometry={nodes.Cube017_Material003_0.geometry}
          // material={nodes.Cube017_Material003_0.material}
          material={textureMaterial}
          position={[0, 0.187, -0.039]}
        >
          <meshBasicMaterial map={texture} />
        </mesh>
      </group>
      <group
        position={[1.139, 1.359, -0.327]}
        rotation={[Math.PI / 2, 0, -Math.PI]}
      >
        <mesh
          geometry={nodes.Cube016_black_cloth_0.geometry}
          // material={nodes.Cube016_black_cloth_0.material}
          material={textureMaterial}
          position={[0, 0.119, 0.064]}
        >
          <meshBasicMaterial map={texture} />
        </mesh>
      </group>
      <group position={[2.273, 1.042, 1.029]} rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          geometry={nodes.Cube012_Rgb_lighting_0.geometry}
          // material={nodes.Cube012_Rgb_lighting_0.material}
          material={textureMaterial}
          position={[-0.201, 0, -0.089]}
        >
          <meshBasicMaterial map={texture} />
        </mesh>
        <mesh
          geometry={nodes.Cube012_white_0.geometry}
          // material={nodes.Cube012_white_0.material}
          material={textureMaterial}
          position={[-0.09, -0.003, -0.09]}
        >
          <meshBasicMaterial map={texture} />
        </mesh>
      </group>
      <group
        position={[0.24, 1.005, -0.293]}
        rotation={[Math.PI / 2, 0, Math.PI]}
      >
        <mesh
          geometry={nodes.Cube003_white_0.geometry}
          // material={nodes.Cube003_white_0.material}
          material={textureMaterial}
          position={[-0.083, 0.067, 0.035]}
        >
          <meshBasicMaterial map={texture} />
        </mesh>
      </group>
      <group position={[1.633, 1.573, 0]} rotation={[Math.PI / 2, 0, -Math.PI]}>
        <mesh
          geometry={nodes.Cube002_white_0.geometry}
          // material={nodes.Cube002_white_0.material}
          material={textureMaterial}
          position={[-0.044, 0.194, 0.304]}
        >
          <meshBasicMaterial map={texture} />
        </mesh>
      </group>
      <group position={[1.633, 1.682, 0]} rotation={[Math.PI / 2, 0, -Math.PI]}>
        <mesh
          geometry={nodes.Cube001__0.geometry}
          // material={nodes.Cube001__0.material}
          material={textureMaterial}
          position={[-0.134, 0.696, -0.515]}
          rotation={[0, 0, -1.557]}
        >
          <meshBasicMaterial map={texture} />
        </mesh>
      </group>
      <mesh
        geometry={nodes.object_0.geometry}
        // material={nodes.object_0.material}
        material={textureMaterial}
        position={[0.477, -1.657, -0.615]}
        rotation={[3.14, 0.206, -3.141]}
      >
        <meshBasicMaterial map={texture} />
      </mesh>
      <mesh
        geometry={nodes.monitor2_back.geometry}
        // material={nodes.monitor2_back.material}
        material={textureMaterial}
        position={[-2.45, 2.902, 3.822]}
        rotation={[0, 0.002, -Math.PI / 2]}
      >
        <meshBasicMaterial map={texture} />
      </mesh>
      <mesh
        geometry={nodes.Cube044.geometry}
        // material={nodes.Cube044.material}
        material={textureMaterial}
        position={[-0.062, 0.098, 4.103]}
        rotation={[Math.PI, -0.002, Math.PI]}
      >
        <meshBasicMaterial map={texture} />
      </mesh>
      <mesh
        geometry={nodes.Cube043.geometry}
        // material={nodes.Cube043.material}
        material={textureMaterial}
        position={[2.616, 2.862, 0.248]}
        rotation={[-Math.PI, 0, Math.PI / 2]}
      >
        <meshBasicMaterial map={texture} />
      </mesh>

      <mesh
        geometry={nodes.Cube042.geometry}
        // material={nodes.Cube042.material}
        material={glasstextureMaterial}
        position={[2.13, 2.72, -0.857]}
        rotation={[-Math.PI / 2, 0, -Math.PI]}
      >
        <meshBasicMaterial
          map={texture}
          color={"white"}
          emissiveIntensity={2}
          toneMapped={false}
        />
      </mesh>

      <mesh
        geometry={nodes.Cube041.geometry}
        // material={nodes.Cube041.material}
        material={textureMaterial}
        // material={textureMaterial2}
        position={[2.82, 2.39, -0.72]}
        rotation={[-0.056, 0.018, -1.876]}
      >
        <meshBasicMaterial map={texture2} />
      </mesh>
      <mesh
        geometry={nodes.Monitor_back.geometry}
        material={nodes.Monitor_back.material}
        position={[1.154, 1.709, -0.695]}
        rotation={[1.558, 0.013, -3.11]}
      >
        <meshBasicMaterial map={texture} />
      </mesh>
      <mesh
        geometry={nodes.Cube_60001.geometry}
        material={nodes.Cube_60001.material}
        position={[1.885, 0.894, 2.252]}
        rotation={[-Math.PI / 2, 0, 1.558]}
      >
        <meshBasicMaterial map={texture} />
      </mesh>
      <mesh
        geometry={nodes.Cube046.geometry}
        // material={nodes.Cube046.material}
        material={textureMaterial3}
        position={[-2.097, 0.393, 2.006]}
      >
        <meshBasicMaterial map={texture3} />
      </mesh>
      <mesh
        geometry={nodes.Monitor.geometry}
        material={textureMaterial}
        position={[1.154, 1.709, -0.695]}
        rotation={[1.558, 0.013, -3.11]}
      >
        <Html
          className="w-[375px] h-[210px] overflow-hidden scale-[0.5] bg-black"
          style={{
            transform: "rotateY(180deg)",
          }}
          occlude="blending"
          rotation-x={-Math.PI / 2}
          position={[0.0, -0.01, 0.0]}
          scale={0.1}
          transform
          wrapperClass={"monitor"}
          distanceFactor={10}
          fullscreen={false}
        >
          <div
            className="w-[370px] h-[210px]"
            onPointerDown={(e) => e.stopPropagation()}
          >
            {another ? (
              <div className="text-white">
                {/* {console.log("props", props)} */}
                <Contact />
              </div>
            ) : (
              <Home />
            )}
          </div>
        </Html>
      </mesh>
      <mesh
        geometry={nodes.monitor2.geometry}
        material={textureMaterial}
        position={[-2.45, 2.902, 3.822]}
        rotation={[0, 0.002, -Math.PI / 2]}
      >
        {/* <meshBasicMaterial map={texture} /> */}
        <Html
          as="div"
          center
          fullscreen
          distanceFactor={10}
          zIndexRange={[100, 0]}
          transform
          wrapperClass={"monitor"}
          className="w-[540px] h-[350px] bg-slate-800 rotate-360"
          scale={0.13}
          // occlude
          ref={htmlRef}
          position={[0.42, 0.13, -1.7]}
          // position={modControls.position}
          rotation={[-1.57, 0, 1.57]}
          // rotation={modControls.rotation}
        >
          <Menu setOpen={props.setOpen} mdata={mdata} setMdata={setMdata} />
        </Html>
      </mesh>
      <mesh
        geometry={nodes.Text001.geometry}
        material={nodes.Text001.material}
        position={[1.632, 2.164, -0.523]}
        rotation={[1.571, 0, 0]}
        scale={0.096}
      >
        <meshBasicMaterial map={texture} />
      </mesh>
      <mesh
        geometry={nodes.Cube036.geometry}
        // material={nodes.Cube036.material}
        material={textureMaterial2}
        position={[2.567, 2.39, -0.72]}
        rotation={[-0.056, 0.018, -1.876]}
      >
        <meshBasicMaterial map={texture2} />
      </mesh>
      <mesh
        geometry={nodes.Cube037.geometry}
        // material={nodes.Cube037.material}
        material={textureMaterial2}
        position={[2.616, 2.39, -0.72]}
        rotation={[-0.056, 0.018, -1.876]}
      >
        <meshBasicMaterial map={texture2} />
      </mesh>
      <mesh
        geometry={nodes.Cube033.geometry}
        // material={nodes.Cube033.material}
        material={textureMaterial2}
        position={[2.722, 2.377, -0.72]}
        rotation={[-0.058, 0.011, -1.919]}
      >
        <meshBasicMaterial map={texture2} />
      </mesh>
      <mesh
        geometry={nodes.Cube040.geometry}
        // material={nodes.Cube040.material}
        material={textureMaterial2}
        position={[2.672, 2.377, -0.72]}
        rotation={[-0.058, 0.011, -1.919]}
      >
        <meshBasicMaterial map={texture2} />
      </mesh>
      <mesh
        geometry={nodes.Cube038.geometry}
        // material={nodes.Cube038.material}
        material={textureMaterial2}
        position={[2.771, 2.39, -0.72]}
        rotation={[-0.056, 0.018, -1.876]}
      >
        <meshBasicMaterial map={texture2} />
      </mesh>
      <mesh
        geometry={nodes.Cube035.geometry}
        // material={nodes.Cube035.material}
        material={textureMaterial2}
        position={[2.865, 2.39, -0.72]}
        rotation={[-0.056, 0.018, -1.876]}
      >
        <meshBasicMaterial map={texture2} />
      </mesh>
    </group>
  );
}

useGLTF.preload("/models/untitled.glb");
